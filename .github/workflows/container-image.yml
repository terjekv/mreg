name: Container image
on:
  push:
    branches:
      - master
  # Run every week to get updated dependencies.
  schedule:
    - cron: '40 08 * * 1'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Docker build
      run: docker build -t mreg .
    - name: Save image
      run: docker save mreg | gzip > mreg.tgz
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: mreg
        path: mreg.tgz

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Start PostgreSQL
      run: |
        docker network create mreg
        docker run --rm --network mreg -h postgres --name postgres -e POSTGRES_PASSWORD=mreg -e POSTGRES_USER=mreg --detach postgres
        sleep 3s
        docker exec postgres psql -U mreg -h localhost -c 'CREATE EXTENSION IF NOT EXISTS citext;' -d template1
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: mreg
    - name: Load image
      run: docker load --input mreg.tgz
    - name: Run tests
      run: |
        docker run --rm -t --network mreg --entrypoint /app/entrypoint-test.sh \
        --mount type=bind,source=${{github.workspace}}/mregsite,target=/app/mregsite,ro=true \
        --mount type=tmpfs,target=/app/logs \
        -e MREG_DB_HOST=postgres -e MREG_DB_PASSWORD=mreg -e MREG_DB_USER=mreg \
        mreg

  publish:
    name: Publish
    needs: test
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: mreg
    - name: Load image
      run: docker load --input mreg.tgz
    - name: Log in to registry
      run: >
        echo "${{ secrets.GITHUB_TOKEN }}"
        | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    - name: Push image
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/mreg
        TAG_NAME=latest
        docker tag mreg:latest $IMAGE_ID:$TAG_NAME
        docker push $IMAGE_ID:$TAG_NAME
